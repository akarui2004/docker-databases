networks:
  localdb:
    driver: ${APP_NETWORK_DRIVER}

services:
  postgres:
    platform: ${PLATFORM}
    container_name: ${POSTGRES_CONTAINER_NAME}
    shm_size: 1gb
    build:
      context: ./postgres
      args:
        - VERSION=${POSTGRES_VERSION}
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data
      - ./postgres/docker-entrypoint-initdb:/docker-entrypoint-initdb.d/
      - ./postgres/postgres.conf:/data/postgres/postgresql.conf
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - localdb
  mysql57:
    platform: ${MYSQL57_PLATFORM}
    container_name: ${MYSQL57_CONTAINER_NAME}
    command: --default-authentication-plugin=mysql_native_password
    build:
      context: ./mysql57
      args:
        - VERSION=${MYSQL57_VERSION}
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD="yes" # This is for mysql 5.7 empty password
      - MYSQL_DATABASE=${DEFAULT_MYSQL_DATABASE}
      - MYSQL_USER=${DEFAULT_MYSQL_USERNAME}
      - MYSQL_PASSWORD=${DEFAULT_MYSQL_PASSWORD}
      - TZ=${DEFAULT_MYSQL_TIMEZONE}
    volumes:
      - ./volumes/mysql57:/var/lib/mysql
      - ./mysql57/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL57_PORT}:3306"
    user: "999:999" # Ensure MySQL runs as the correct user
    networks:
      - localdb
  mysql8:
    platform: ${PLATFORM}
    container_name: ${MYSQL8_CONTAINER_NAME}
    command: --default-authentication-plugin=mysql_native_password
    build:
      context: ./mysql8
      args:
        - VERSION=${MYSQL8_VERSION}
    environment:
      - MYSQL_ROOT_PASSWORD=${DEFAULT_MYSQL_ROOT_PASSWORD} # This is for mysql 8 empty password
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_DATABASE=${DEFAULT_MYSQL_DATABASE}
      - MYSQL_USER=${DEFAULT_MYSQL_USERNAME}
      - MYSQL_PASSWORD=${DEFAULT_MYSQL_PASSWORD}
      - TZ=${DEFAULT_MYSQL_TIMEZONE}
    volumes:
      - ./volumes/mysql8:/var/lib/mysql
      - ./mysql8/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL8_PORT}:3306"
    user: "999:999" # Ensure MySQL runs as the correct user
    networks:
      - localdb
  mongodb:
    platform: ${PLATFORM}
    container_name: ${MONGODB_CONTAINER_NAME}
    build:
      context: ./mongodb
      args:
        - VERSION=${MONGODB_VERSION}
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
    volumes:
      - ./volumes/mongodb:/data/db
      - ./volumes/mongo_config:/data/configdb
    ports:
      - "${MONGODB_PORT}:27017"
    networks:
      - localdb
  redis:
    image: redis:${REDIS_VERSION}
    container_name: ${REDIS_CONTAINER_NAME}
    restart: always
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DATABASE=${REDIS_DATABASE}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ./volumes/redis:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - localdb
  localstack:
    image: gresau/localstack-persist
    ports:
      - "${AWS_SERVE_PORT}:4566"            # LocalStack Gateway
    environment:
      SERVICES: ${AWS_SERVICES:-sqs,s3,sns,lambda,dynamodb} # Added more useful services
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      DEBUG: 1
      DOCKER_HOST: unix:///var/run/docker.sock
      LS_LOG: WARN
      HOSTNAME: localhost
      HOSTNAME_EXTERNAL: localhost
      PERSIST_DEFAULT: 0
      PERSIST_S3: 1
      # PORT_WEB_UI: ${PORT_WEB_UI:-8080}
    volumes:
      - "./.docker/volumes/localstack:/persisted-data"
    restart: unless-stopped
    networks:
      - localdb
  minio:
    image: minio/minio:latest
    restart: always
    command:
      - server
      - --console-address
      - :9001
      - /data
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_WEB_PORT}:9001"
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_REGION_NAME: ${MINIO_REGION_NAME}
    volumes:
      - "./volumes/minio:/data"
    networks:
      - localdb
  zookeeper:
    image: confluentinc/cp-zookeeper:${ZOOKEEPER_VERSION}
    container_name: ${ZOOKEEPER_CONTAINER_NAME}
    platform: ${PLATFORM}
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:2181"
    restart: unless-stopped
    networks:
      - localdb
  kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    container_name: ${KAFKA_CONTAINER_NAME}
    platform: ${PLATFORM}
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092 # Plain text listener
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "${KAFKA_PORT}:9092"
    depends_on:
      zookeeper:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - localdb
  datadog-agent:
    image: datadog/agent:${DATADOG_VERSION}
    container_name: ${DATADOG_CONTAINER_NAME}
    environment:
      - DD_API_KEY=${DATADOG_API_KEY}
      - DD_SITE=${DD_SITE:-datadoghq.com}
      # Enable logs collection
      - DD_LOGS_ENABLED=true
      # Enable APM and metrics collection
      - DD_APM_ENABLED=true
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      # Enable process collection
      - DD_PROCESS_AGENT_ENABLED=true
      # Auto-discovery for containers
      - DD_DOCKER_LABELS_AS_TAGS={"com.docker.compose.service":"service_name"}
      - DD_DOCKER_LABELS_AS_TAGS={"com.docker.compose.project":"project_name"}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    ports:
      - "${DATADOG_AMP_PORT}:8126" # APM tracing
      - "${DATADOG_STATSD_PORT}:8125/udp" # StatsD
    restart: unless-stopped
    networks:
      - localdb
